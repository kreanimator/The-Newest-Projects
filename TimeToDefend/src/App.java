import java.util.concurrent.Semaphore;

public class App {
    public static void main(String[] args) throws InterruptedException {
        Camp camp = new Camp();
        Forest forest = new Forest();
        Semaphore semaphore = new Semaphore(3);
        Thread [] threads = new Thread[10];
        for(int i =0; i < threads.length;i++){
            threads[i] = new Thread(new Worker(forest,camp,semaphore));
            threads[i].start();
        }
        for(int i =0; i < threads.length;i ++){
            threads[i].join();
        }
        if (forest.value> 100){
            System.out.println("Hooray!");
        }else{
            System.out.println(" Dammit....");
        }
    }
}
//    Время обороняться!
//
//        На ваш лагерь планируется нападение, через несколько дней. Нужно готовиться к обороне и строить оборонительные
//        сооружения! Для этого потребуются запасы леса. Пришло время отправлять рабочих в лес.
//        Но одновременно в лес может зайти не больше 3 рабочих, иначе их заметят. Получится ли защитить лагерь?
//
//        Нужно создать класс “лес”, в который могут войти лишь трое рабочих, класс “лагерь”,
//        в котором будут складывать дерево и класс рабочий, который будет заходить в лес и нести оттуда дерево в лагерь.
//        Соответственно, когда рабочий заходить в лес он “засыпает” на случайное значение времени и
//        потом возвращается в лагерь с определенным количеством дерева(каждый раз оно может быть разным).
//        Каждый рабочий может сходить в лес только 5
//        раз, на большее у него не хватит сил. В конце,
//        нужно проверить хватит ли дерева на постройку
//        оборонительных сооружений и понять,
//        переживет ли ваш лагерь нападение.

